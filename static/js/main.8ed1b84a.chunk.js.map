{"version":3,"sources":["main.js","App.js","reportWebVitals.js","index.js"],"names":["Main","id","onSubmit","event","preventDefault","props","createTask","task","value","ref","input","type","className","placeholder","required","hidden","this","tasks","map","key","name","defaultChecked","completed","checkbox","onClick","checkboxClicked","content","Component","App","state","account","todoList","taskCount","loading","bind","loadWeb3","loadBlockChainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","net","getId","networkId","networkData","TodoList","networks","Contract","abi","address","methods","call","i","console","log","send","from","once","receipt","taskId","href","role","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ed1b84a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Main extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"content\">\r\n        <form onSubmit = {(event) => {\r\n          event.preventDefault()\r\n          this.props.createTask(this.task.value)\r\n        }}>\r\n          <input id = \"newTask\" ref ={(input) => this.task = input} type=\"text\" className= \"form-control\" placeholder =\"Add task...\" required />\r\n          <input type =\"submit\" hidden={true} />\r\n        </form>\r\n        <ul id=\"taskList\" className=\"list-unstyled\">\r\n          { this.props.tasks.map((task, key) => {\r\n            return(\r\n              <div className=\"taskTemplate\" className=\"checkbox\" key={key}>\r\n                <label>\r\n                    <input type=\"checkbox\"\r\n                    name = {task.id}\r\n                    defaultChecked = {task.completed}\r\n                    ref ={(input) => {this.checkbox = input}}\r\n                    onClick={(event) => {\r\n                    this.props.checkboxClicked(this.checkbox.name)}}/>\r\n                  <span className=\"content\">{task.content}</span>\r\n                </label>\r\n              </div>\r\n            )\r\n          })}\r\n        </ul>\r\n        <ul id=\"completedTaskList\" className=\"list-unstyled\">\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","\r\nimport './App.css';\r\nimport React, {Component} from 'react';\r\nimport Web3 from 'web3';\r\nimport TodoList from './src/build/contracts/TodoList.json'\r\nimport Main from './main'\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n\t\t  await this.loadWeb3()\r\n\t\t  await this.loadBlockChainData()\r\n\t  }\r\n  async loadWeb3() {\r\n      if (window.ethereum) {\r\n        window.web3 = new Web3(window.ethereum)\r\n        await window.ethereum.enable()\r\n    }\r\n      else if (window.web3) {\r\n        window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n      else{\r\n        window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n    }\r\n\r\n  async loadBlockChainData(){\r\n    const web3 = window.web3\r\n\r\n\t  //load accounts\r\n\t  const accounts = await web3.eth.getAccounts()\r\n\t  this.setState({account: accounts[0]})\r\n\r\n    //Get Network ID\r\n\t  const networkId = await web3.eth.net.getId()\r\n\t  const networkData = TodoList.networks[networkId]\r\n\t  if(networkData){\r\n\t\t  //load smart contrcat proper\r\n\t\t const todoList = new web3.eth.Contract(TodoList.abi, networkData.address)\r\n\t\t  //set TodoList state\r\n\t\t  this.setState({todoList: todoList})\r\n\r\n      const taskCount = await todoList.methods.taskCount().call()\r\n      this.setState({taskCount})\r\n\r\n      //list out TaskList\r\n      for(var i = 1; i <= taskCount; i++){\r\n        const task = await todoList.methods.tasks(i).call()\r\n        this.setState({\r\n          tasks: [...this.state.tasks, task]\r\n        })\r\n        console.log(\"tasks: \", this.state.tasks)\r\n      }\r\n} else{\r\n   window.alert('contract was not deployed to test network.')\r\n }\r\n\r\n this.setState({loading:  false})\r\n\r\n}\r\n\r\ncreateTask(content) {\r\n  this.setState({ loading: true })\r\n  this.state.todoList.methods.createTask(content).send({ from: this.state.account })\r\n  .once('receipt', (receipt) => {\r\n    this.setState({ loading: false })\r\n  })\r\n}\r\n\r\ncheckboxClicked(taskId) {\r\n    this.setState({ loading: true })\r\n    this.state.todoList.methods.checkboxClicked(taskId).send({ from: this.state.account })\r\n    .once('receipt', (receipt) => {\r\n      this.setState({ loading: false })\r\n    })\r\n  }\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      todoList: null,\r\n      taskCount: 0,\r\n      tasks:[],\r\n      loading: true\r\n    }\r\n    this.createTask = this.createTask.bind(this)\r\n    this.checkboxClicked = this.checkboxClicked.bind(this)\r\n  }\r\n  render(){\r\n    return (\r\n      <div>\r\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n        <ul className=\"navbar-nav px-3\">\r\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n            <small><a className=\"nav-link\" href=\"#\"><span id=\"account\"></span></a></small>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <br></br>\r\n      <blockquote className=\"blockquote text-center\">\r\n      <p className=\"mb-0\"> <strong> TODO LIST </strong></p>\r\n      <footer className=\"blockquote-footer\">Huncho J</footer>\r\n      </blockquote>\r\n\r\n      <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex justify-content-center\">\r\n              {this.state.loading\r\n                ?  <div id = \"loader\" className = \"text-center\"><p className= \"text-center\"> Loading....</p></div>\r\n                : <Main\r\n                  tasks = {this.state.tasks}\r\n                  createTask = {this.createTask}\r\n                  checkboxClicked = {this.checkboxClicked}/>\r\n              }\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}